rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if only viewCount is being updated
    function onlyViewCountChanged() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount']);
    }
    
    // Helper function to check if only likedBy is being updated
    function onlyLikedByChanged() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy']);
    }
    
    // Forum collections - public read, authenticated write
    match /forum_threads/{threadId} {
      allow read: if true;  // Public read access
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && (request.auth.uid == resource.data.authorId || request.auth.token.admin == true)
                    || onlyViewCountChanged()  // Allow view count updates for everyone
                    || (request.auth != null && onlyLikedByChanged());  // Allow likes for authenticated users
      allow delete: if request.auth != null && (request.auth.uid == resource.data.authorId || request.auth.token.admin == true);
    }
    
    match /forum_replies/{replyId} {
      allow read: if true;  // Public read access
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && (request.auth.uid == resource.data.authorId || request.auth.token.admin == true)
                    || (request.auth != null && onlyLikedByChanged());  // Allow likes for authenticated users
      allow delete: if request.auth != null && (request.auth.uid == resource.data.authorId || request.auth.token.admin == true);
    }
    
    // Course reviews - public read, authenticated write with constraints
    match /course_reviews/{reviewId} {
      function isOwner() { return request.auth != null && request.auth.uid == resource.data.userId; }
      function isCreatingOwn() { return request.auth != null && request.auth.uid == request.resource.data.userId; }
      function isAdmin() { return request.auth != null && request.auth.token.admin == true; }
      function validRating() { return request.resource.data.rating >= 1 && request.resource.data.rating <= 5; }
      function validComment() { return request.resource.data.comment is string && request.resource.data.comment.size() > 0 && request.resource.data.comment.size() <= 2000; }
      function validIds() {
        // enforce deterministic id: courseId_userId
        return reviewId == (request.resource.data.courseId + '_' + request.resource.data.userId);
      }
      function enrollmentExists(courseId, userId) {
        return exists(/databases/$(database)/documents/enrollments/$(userId + '_' + courseId));
      }

      allow read: if true; // public read

      // Create new review
      allow create: if isCreatingOwn() && validRating() && validComment() && validIds() && (
        // If verified is true, enrollment must exist; if false or missing, allow
        (request.resource.data.verified == true && enrollmentExists(request.resource.data.courseId, request.resource.data.userId)) ||
        (request.resource.data.verified == false || !("verified" in request.resource.data))
      );

      // Update existing review (owner or admin)
      allow update: if (isOwner() || isAdmin()) && validRating() && validComment() && (
        // Prevent impersonation and id drift
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.courseId == resource.data.courseId &&
        // Verified can only be true if enrollment exists
        ((request.resource.data.verified == true && enrollmentExists(resource.data.courseId, resource.data.userId)) || request.resource.data.verified == false)
      );

      // Delete by owner or admin
      allow delete: if isOwner() || isAdmin();
    }

    // All other collections require authentication
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // Alternative: More specific rules (uncomment when ready for production)
    /*
    // Payments collection - only the user who made the payment can read it
    match /payments/{paymentId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Enrollments collection - only the enrolled user can read/write
    match /enrollments/{enrollmentId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Test collection - allow all authenticated users for testing
    match /test_collection/{document} {
      allow read, write: if request.auth != null;
    }
    */
  }
}
